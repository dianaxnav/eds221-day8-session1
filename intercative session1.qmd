---
title: "dataviz"
format: html
editor: visual
execute: 
  warning: TRUE
---

## Review basics of ggplot

```{r}
library(tidyverse)
library(janitor)
library(here)

library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(gapminder)
library(sf)
```

## Read in data

```{r}
lizards <- read_csv(here::here("data_tidy", "lizards.csv"))
```

Do some data wrangling to create a new subset from lizards where you:

1.  limit the data to only contain western whiptails, Colorado checkered, and eastern fence lizards
2.  add a new column with total length converted to cm
3.  group by species and site
4.  return a summary table with mean total length and standard deviation of total length by species and site

```{r}
western_col <- lizards %>% 
  filter(common_name %in% c("western whiptail", "colorado checkered", "eastern fence")) %>% 
  mutate(total_size_cm = total_length / 10) %>% 
  group_by(common_name, site) %>% 
  summarize(mean_length = mean(total_size_cm, na.rm = TRUE), (sd_length = sd(total_size_cm, na.rm = TRUE)))
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0,0))
  #facet_wrap(~ common_name, scales = "free")
```

```{r}
lizard_counts <- lizards %>% 
  dplyr::count(common_name)

#SAME 

lizards %>% 
  group_by(common_name) %>% 
  summarize(count = n())
#Use dplyr::count to find the total number of lizards by common name in the lizards data set
```

```{r}
#Fct_reorder organizes the plot by n(count) in this situation
ggplot(lizard_counts, aes(y = fct_reorder(common_name, n), x = n)) + 
  geom_col()

#ALSO 
ggplot(data = lizards, aes(x = total_length, y = weight, color = weight)) +
  geom_point() +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0, 20)) +
  scale_color_gradientn(colors = c("yellow", "orange", "pink"))
```

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point() +
  annotate("text", x = 40, y = 90000, label = "A LABEL!") +
  geom_hline(yintercept = 70000, linetype = "dotted", color = "purple") +
  geom_vline(xintercept = mean(gapminder$lifeExp))
```

```{r}
gapminder %>% 
  filter(continent %in% "Europe" & year %in% 2002) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +#(shape = 23, size = 4, color = "green", fill = "pink")
  #geom_text_repel(aes(label = country))+
  gghighlight(country == "Poland", label_key = country)
```

Create a ggplot chart using data only from 2007, then highlight all countries in Europe, adding their country name as the label (using the same x and y variable).

```{r}
gapminder %>% 
  filter(year %in% 2002) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  geom_text_repel(aes(label = country)) +
  gghighlight(continent == "Europe")
```

```{r}
jornada_veg <- read_sf(here("data_raw", "spatial_vegetation", "doc.kml")) %>% 
  select(name = Name)

ggplot() + 
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") + 
  theme(panel.background = element_rect(color = "cyan", size = 5, fill = "blue"),
        plot.background = element_rect(fill = "brown"),
        panel.grid = element_line(color = "green"),
        axis.text.x = element_text(color = "red"))
  
```
